#!/usr/bin/env python
import optparse
import os
import pprint
import re
import subprocess
import sys
import glob

CC = os.environ.get('CC', 'cc')
node_root = os.environ.get('NODE_ROOT')

root_dir = os.path.dirname(__file__)
sys.path.insert(0, os.path.join(root_dir, 'webinos', 'tools', 'deps'))

# parse our options
parser = optparse.OptionParser()

parser.add_option("--debug",
    action="store_true",
    dest="debug",
    help="Also build debug build")

parser.add_option("--prefix",
    action="store",
    dest="prefix",
    help="Select the install prefix (defaults to /usr/local)")

parser.add_option("--without-npm",
    action="store_true",
    dest="without_npm",
    help="Don\'t install the bundled npm package manager")

parser.add_option("--without-waf",
    action="store_true",
    dest="without_waf",
    help="Don\'t install node-waf")

parser.add_option("--without-ssl",
    action="store_true",
    dest="without_ssl",
    help="Build without SSL")

parser.add_option("--without-snapshot",
    action="store_true",
    dest="without_snapshot",
    help="Build without snapshotting V8 libraries. You might want to set"
         " this for cross-compiling. [Default: False]")

parser.add_option("--shared-v8",
    action="store_true",
    dest="shared_v8",
    help="Link to a shared V8 DLL instead of static linking")

parser.add_option("--shared-v8-includes",
    action="store",
    dest="shared_v8_includes",
    help="Directory containing V8 header files")

parser.add_option("--shared-v8-libpath",
    action="store",
    dest="shared_v8_libpath",
    help="A directory to search for the shared V8 DLL")

parser.add_option("--shared-v8-libname",
    action="store",
    dest="shared_v8_libname",
    help="Alternative lib name to link to (default: 'v8')")

parser.add_option("--openssl-use-sys",
    action="store",
    dest="openssl_use_sys",
    help="Use the system OpenSSL instead of one included with Node")

parser.add_option("--openssl-includes",
    action="store",
    dest="openssl_includes",
    help="A directory to search for the OpenSSL includes")

parser.add_option("--openssl-libpath",
    action="store",
    dest="openssl_libpath",
    help="A directory to search for the OpenSSL libraries")

parser.add_option("--no-ssl2",
    action="store_true",
    dest="no_ssl2",
    help="Disable OpenSSL v2")

parser.add_option("--shared-zlib",
    action="store_true",
    dest="shared_zlib",
    help="Link to a shared zlib DLL instead of static linking")

parser.add_option("--shared-zlib-includes",
    action="store",
    dest="shared_zlib_includes",
    help="Directory containing zlib header files")

parser.add_option("--shared-zlib-libpath",
    action="store",
    dest="shared_zlib_libpath",
    help="A directory to search for the shared zlib DLL")

parser.add_option("--shared-zlib-libname",
    action="store",
    dest="shared_zlib_libname",
    help="Alternative lib name to link to (default: 'z')")

parser.add_option("--with-dtrace",
    action="store_true",
    dest="with_dtrace",
    help="Build with DTrace (experimental)")

# CHECKME does this still work with recent releases of V8?
parser.add_option("--gdb",
    action="store_true",
    dest="gdb",
    help="add gdb support")

parser.add_option("--dest-cpu",
    action="store",
    dest="dest_cpu",
    help="CPU architecture to build for. Valid values are: arm, ia32, x64")

parser.add_option("--webinos-pzh",
   action="store_true",
   dest="webinos_pzh",
   help="Enable this option to enable PZH build")

parser.add_option("--webinos-pzp",
   action="store_true",
   dest="webinos_pzp",
   help="Enable this option to enable PZP build")

parser.add_option("--webinos-discovery",
   action="store_true",
   dest="webinos_discovery",
   help="Enable this option to enable webinos discovery module")
(options, args) = parser.parse_args()


def b(value):
  """Returns the string 'true' if value is truthy, 'false' otherwise."""
  if value:
    return 'true'
  else:
    return 'false'


def pkg_config(pkg):
  cmd = os.popen('pkg-config --libs %s' % pkg, 'r')
  libs = cmd.readline().strip()
  ret = cmd.close()
  if (ret): return None

  cmd = os.popen('pkg-config --cflags %s' % pkg, 'r')
  cflags = cmd.readline().strip()
  ret = cmd.close()
  if (ret): return None

  return (libs, cflags)


def host_arch():
  """Host architecture. One of arm, ia32 or x64."""

  p = subprocess.Popen([CC, '-dM', '-E', '-'],
                       stdin=subprocess.PIPE,
                       stdout=subprocess.PIPE,
                       stderr=subprocess.PIPE)
  p.stdin.write('\n')
  out = p.communicate()[0]

  out = str(out).split('\n')

  k = {}
  for line in out:
    import shlex
    lst = shlex.split(line)
    if len(lst) > 2:
      key = lst[1]
      val = lst[2]
      k[key] = val

  matchup = {
    '__x86_64__'  : 'x64',
    '__i386__'    : 'ia32',
    '__arm__'     : 'arm',
  }

  rtn = 'ia32' # default

  for i in matchup:
    if i in k and k[i] != '0':
      rtn = matchup[i]
      break

  return rtn


def target_arch():
  return host_arch()


def gcc_version():
  try:
    proc = subprocess.Popen([CC, '-v'], stderr=subprocess.PIPE)
  except OSError:
    return None
  # TODO parse clang output
  version = proc.communicate()[1].split('\n')[-2]
  match = re.match('gcc version (\d+)\.(\d+)\.(\d+)', version)
  if not match: return None
  return ['LLVM' in version] + map(int, match.groups())


def configure_node(o):
  # TODO add gdb
  o['variables']['node_prefix'] = options.prefix if options.prefix else ''
  o['variables']['node_use_dtrace'] = b(options.with_dtrace)
  o['variables']['node_install_npm'] = b(not options.without_npm)
  o['variables']['node_install_waf'] = b(not options.without_waf)
  o['variables']['host_arch'] = host_arch()
  o['variables']['target_arch'] = options.dest_cpu or target_arch()
  o['default_configuration'] = 'Debug' if options.debug else 'Release'
  

  # turn off strict aliasing if gcc < 4.6.0 unless it's llvm-gcc
  # see http://gcc.gnu.org/bugzilla/show_bug.cgi?id=45883
  # see http://code.google.com/p/v8/issues/detail?id=884
  o['variables']['strict_aliasing'] = b(
    'clang' in CC or gcc_version() >= [False, 4, 6, 0])

  # clang has always supported -fvisibility=hidden, right?
  if 'clang' not in CC and gcc_version() < [False, 4, 0, 0]:
    o['variables']['visibility'] = ''

def configure_webinos(o):
  o['variables']['curr_dir'] = os.getcwd();
  o['variables']['webinos_pzh'] = b(options.webinos_pzh);
  if (options.webinos_pzh)
    o['variables']['webinos_pzp'] = b(options.webinos_pzp);
    o['variables']['webinos_target'] = "webinos_pzh"
  else 
    o['variables']['webinos_pzp'] = b(not options.webinos_pzp);
    o['variables']['webinos_target'] = "webinos_pzp"
  o['variables']['node_jsfiles'] = glob.glob(os.getcwd()+'/deps/node/lib/*.js');
  o['variables']['pzh_jsfiles'] = glob.glob(os.getcwd()+'/webinos/pzh/lib/*.js');
  o['variables']['pzp_jsfiles'] = glob.glob(os.getcwd()+'/webinos/pzp/lib/webinos_pzp*.js');
  o['variables']['session_jsfiles'] = glob.glob(os.getcwd()+'/webinos/pzp/lib/webinos_session*.js');
  o['variables']['context_jsfiles'] = glob.glob(os.getcwd()+'/webinos/common/manager/context_manager/lib/webinos_context*.js');
#Webinos API  
  o['variables']['geolocation_jsfiles'] = glob.glob(os.getcwd()+'/webinos/api/geolocation/lib/*.js');
  o['variables']['tv_jsfiles'] = glob.glob(os.getcwd()+'/webinos/api/tv/lib/*.js');
  o['variables']['contacts_jsfiles'] = glob.glob(os.getcwd()+'/webinos/api/contacts/lib/*.js');
  o['variables']['file_jsfiles'] = glob.glob(os.getcwd()+'/webinos/api/file/lib/*.js');
  o['variables']['vehicle_jsfiles'] = glob.glob(os.getcwd()+'/webinos/api/vehicle/lib/*.js');
  o['variables']['vehicle_jsfiles'] += glob.glob(os.getcwd()+'/webinos/api/vehicle/contrib/vb-sim/*.js');
  o['variables']['payment_jsfiles'] = glob.glob(os.getcwd()+'/webinos/api/payment/lib/*.js');
  o['variables']['deviceorientation_jsfiles'] = glob.glob(os.getcwd()+'/webinos/api/deviceorientation/lib/*.js');
  o['variables']['discovery_jsfiles'] = glob.glob(os.getcwd()+'/webinos/api/discovery/lib/*.js');
#Dependency modules
  o['variables']['dep_websocket_jsfiles'] = glob.glob(os.getcwd()+'/deps/websocket/lib/*.js');
  o['variables']['dep_websocket_jsfiles'] += glob.glob(os.getcwd()+'/deps/websocket/vendor/node_ctype/*.js');
  o['variables']['dep_websocket_jsfiles'] += glob.glob(os.getcwd()+'/deps/websocket/vendor/*.js');
  o['variables']['dep_openid_jsfiles'] = glob.glob(os.getcwd()+'/deps/openid/openid.js');
  o['variables']['dep_openid_jsfiles'] += glob.glob(os.getcwd()+'/deps/openid/lib/*.js');
  o['variables']['dep_schema_jsfiles'] = glob.glob(os.getcwd()+'/deps/schema/lib/*.js');
  o['variables']['dep_schema_jsfiles'] += glob.glob(os.getcwd()+'/deps/schema/lib/draft-02/*.js');
  o['libraries'] += ['-lopenobex', '-lobexftp', '-lbluetooth' ];

def configure_libz(o):
  o['variables']['node_shared_zlib'] = b(options.shared_zlib)

  # assume shared_zlib if one of these is set?
  if options.shared_zlib_libpath:
    o['libraries'] += ['-L%s' % options.shared_zlib_libpath]
  if options.shared_zlib_libname:
    o['libraries'] += ['-l%s' % options.shared_zlib_libname]
  elif options.shared_zlib:
    o['libraries'] += ['-lz']
  if options.shared_zlib_includes:
    o['include_dirs'] += [options.shared_zlib_includes]


def configure_v8(o):
  o['variables']['v8_use_snapshot'] = b(not options.without_snapshot)
  o['variables']['node_shared_v8'] = b(options.shared_v8)

  # assume shared_v8 if one of these is set?
  if options.shared_v8_libpath:
    o['libraries'] += ['-L%s' % options.shared_v8_libpath]
  if options.shared_v8_libname:
    o['libraries'] += ['-l%s' % options.shared_v8_libname]
  elif options.shared_v8:
    o['libraries'] += ['-lv8']
  if options.shared_v8_includes:
    o['include_dirs'] += [options.shared_v8_includes]
    o['variables']['node_shared_v8_includes'] = options.shared_v8_includes


def configure_openssl(o):
  o['variables']['node_use_openssl'] = b(not options.without_ssl)

  if options.without_ssl:
    return

  if options.no_ssl2:
    o['defines'] += ['OPENSSL_NO_SSL2=1']

  if not options.openssl_use_sys:
    o['variables']['node_use_system_openssl'] = b(False)
  else:
    out = pkg_config('openssl')
    (libs, cflags) = out if out else ('', '')

    if options.openssl_libpath:
      o['libraries'] += ['-L%s' % options.openssl_libpath, '-lssl', '-lcrypto']
    else:
      o['libraries'] += libs.split()

    if options.openssl_includes:
      o['include_dirs'] += [options.openssl_includes]
    else:
      o['cflags'] += cflags.split()

    o['variables']['node_use_system_openssl'] = b(
      libs or cflags or options.openssl_libpath or options.openssl_includes)


output = {
  'variables': {},
  'include_dirs': [],
  'libraries': [],
  'defines': [],
  'cflags': [],
}

configure_node(output)
configure_libz(output)
configure_v8(output)
configure_openssl(output)
configure_webinos(output)

# variables should be a root level element,
# move everything else to target_defaults
variables = output['variables']
del output['variables']
output = {
  'variables': variables,
  'target_defaults': output
}
pprint.pprint(output, indent=2)

def write(filename, data):
  filename = os.path.join(root_dir, filename)
  print "creating ", filename
  with open(filename, 'w+') as f:
    f.write(data)

write('config.gypi', "# Do not edit. Generated by the configure script.\n" +
  pprint.pformat(output, indent=2))

write('config.mk', "# Do not edit. Generated by the configure script.\n" +
  ("BUILDTYPE=%s\n" % ('Debug' if options.debug else 'Release')))

subprocess.call(['tools/gyp_webinos','-f', 'make'])
