#!/usr/bin/env python
import optparse
import os
import shutil
import string
import pprint
import re
import subprocess
import sys
import glob

CC = os.environ.get('CC', 'cc')
node_root = os.getenv('NODE_ROOT')

root_dir = os.path.dirname(__file__)
sys.path.insert(0, os.path.join(root_dir, 'webinos', 'tools', 'deps'))

# parse our options
parser = optparse.OptionParser()

parser.add_option("--debug",
    action="store_true",
    dest="debug",
    help="Also build debug build")

parser.add_option("--prefix",
    action="store",
    dest="prefix",
    help="Select the install prefix (defaults to /usr/local)")
    
parser.add_option("--dest-cpu",
    action="store",
    dest="dest_cpu",
    help="CPU architecture to build for. Valid values are: arm, ia32, x64")

parser.add_option("--staticlib",
   action="store_true",
   dest="staticlib",
   help="Enable this option to enable static build")

parser.add_option("--webinos-pzh",
   action="store_true",
   dest="webinos_pzh",
   help="Enable this option to enable PZH build")

parser.add_option("--webinos-pzp",
   action="store_true",
   dest="webinos_pzp",
   help="Enable this option to enable PZP build")

(options, args) = parser.parse_args()


def b(value):
  """Returns the string 'true' if value is truthy, 'false' otherwise."""
  if value:
    return 'true'
  else:
    return 'false'

def host_arch():
  """Host architecture. One of arm, ia32 or x64."""

  p = subprocess.Popen([CC, '-dM', '-E', '-'],
                       stdin=subprocess.PIPE,
                       stdout=subprocess.PIPE,
                       stderr=subprocess.PIPE)
  p.stdin.write('\n')
  out = p.communicate()[0]

  out = str(out).split('\n')

  k = {}
  for line in out:
    import shlex
    lst = shlex.split(line)
    if len(lst) > 2:
      key = lst[1]
      val = lst[2]
      k[key] = val

  matchup = {
    '__x86_64__'  : 'x64',
    '__i386__'    : 'ia32',
    '__arm__'     : 'arm',
  }

  rtn = 'ia32' # default

  for i in matchup:
    if i in k and k[i] != '0':
      rtn = matchup[i]
      break

  return rtn


def target_arch():
  return host_arch()


def gcc_version():
  try:
    proc = subprocess.Popen([CC, '-v'], stderr=subprocess.PIPE)
  except OSError:
    return None
  # TODO parse clang output
  version = proc.communicate()[1].split('\n')[-2]
  match = re.match('gcc version (\d+)\.(\d+)\.(\d+)', version)
  if not match: return None
  return ['LLVM' in version] + map(int, match.groups())

def injectModulesinNode():
  if node_root != "":
    r = open(node_root+"/src/node_extensions.h", "r")
    str_list = []
    changed = []
    insert = 'true'
    for line in r:
     str_list.append(line)
     if line == "NODE_EXT_LIST_ITEM(node_certificate_manager)\n":
       insert = 'false'
       
    r.close()
    
    if insert == 'true':
      for value in str_list:
        changed.append(value)
        if value == "NODE_EXT_LIST_ITEM(node_zlib)\n" :
          changed.append("NODE_EXT_LIST_ITEM(node_certificate_manager)\n")
          changed.append("NODE_EXT_LIST_ITEM(node_bluetooth)\n")
          changed.append("NODE_EXT_LIST_ITEM(node_nativedevicestatus)\n")
          changed.append("NODE_EXT_LIST_ITEM(node_localcontacts)\n")
          changed.append("NODE_EXT_LIST_ITEM(node_pm)\n")
    else:
     changed = str_list
     
    w = open(node_root+"/src/node_extensions.h", "w")
    for value in changed:
      w.write(value)
    w.close()
  else:
    sys.exit("failed as NODE_ROOT is not set, run export NODE_ROOT=/path/to/node_folder")
    
def configure_webinos(o):
  injectModulesinNode()
  o['variables']['prefix'] = options.prefix if options.prefix else ''
  o['variables']['curr_dir'] = os.getcwd();
  o['variables']['webinos_pzh'] = b(options.webinos_pzh);

  #if options.webinos_pzh :
  #  shutil.copyfile('webinos/test/startFarm.js' , node_root+'/lib/_third_party_main.js')
  #else :
  #  shutil.copyfile('webinos/test/startPzp.js' , node_root+'/lib/_third_party_main.js')

  o['variables']['node_root'] = node_root;
  o['libraries'] += ['-lopenobex', '-lobexftp', '-lbluetooth', '-ldl', '-lrt'];
  
  o['variables']['host_arch'] = host_arch()
  o['variables']['target_arch'] = options.dest_cpu or target_arch()
  o['default_configuration'] = 'Debug' if options.debug else 'Release'


  # turn off strict aliasing if gcc < 4.6.0 unless it's llvm-gcc
  # see http://gcc.gnu.org/bugzilla/show_bug.cgi?id=45883
  # see http://code.google.com/p/v8/issues/detail?id=884
  o['variables']['strict_aliasing'] = b(
    'clang' in CC or gcc_version() >= [False, 4, 6, 0])

  # clang has always supported -fvisibility=hidden, right?
  if 'clang' not in CC and gcc_version() < [False, 4, 0, 0]:
    o['variables']['visibility'] = ''


output = {
  'variables': {},
  'include_dirs': [],
  'libraries': [],
  'defines': [],
  'cflags': [],
}

configure_webinos(output)

# variables should be a root level element,
# move everything else to target_defaults
variables = output['variables']
del output['variables']
output = {
  'variables': variables,
  'target_defaults': output
}
pprint.pprint(output, indent=2)

def write(filename, data):
  filename = os.path.join(root_dir, filename)
  print "creating ", filename
  with open(filename, 'w+') as f:
    f.write(data)

write('config.gypi', "# Do not edit. Generated by the configure script.\n" +
  pprint.pformat(output, indent=2))

write('config.mk', "# Do not edit. Generated by the configure script.\n" +
  ("BUILDTYPE=%s\n" % ('Debug' if options.debug else 'Release')) +
  ("DESTDIR=%s\n" % ( options.prefix if options.prefix else '/usr/local')))

subprocess.call(['tools/gyp_webinos','-f', 'make'])
