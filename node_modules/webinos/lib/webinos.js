/******************************************************************************
 * Code contributed to the webinos project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * Copyright 2012 Felix-Johannes Jendrusch, Fraunhofer FOKUS
 *****************************************************************************/
(function () {
	"use strict";

	var nPath = require("path");
	var nFs = require("fs");
	var nPathV = parseFloat(process.versions.node);
	if (nPathV >= 0.7) { nPathV = nFs;} else { nPathV = nPath;}
	var mUtils = {
		createEnvironment: function (dependencies) {
			var environment = require(dependencies),
				dirname = nPath.dirname(dependencies);

			environment.require = function () {
				var argsArray = Array.prototype.slice.call(arguments);

				argsArray.unshift(dirname);

				return require(nPath.join.apply(null, argsArray));
			};

			return environment;
		},
		findDependencies: function (dirname) {
			dirname = nPath.resolve(dirname);

			while (!nPathV.existsSync(nPath.join(dirname, "dependencies.json"))) {
				var parent = nPath.dirname(dirname);

				if (parent == dirname)
					// TODO Throw some webinos.Exception.
					throw "Cannot find 'dependencies.json'";

				dirname = parent;
			}

			return nPath.join(dirname, "dependencies.json");
		}
	};

	var webinos = new (function () {
		var queue = [];

		var looping = false,
			loop = function () {
			if (looping)
				return;

			looping = true;

			process.nextTick(function () {
				try {
					queue.shift().task.call(null);
				} catch (exception) {
					console.error(exception);
				} finally {
					looping = false;

					if (queue.length > 0)
						loop();
				}
			});
		};

		this.enqueue = function (task, priority) {
			var relativePriority = 0;

			if (typeof priority === "number")
				relativePriority = priority;

			var i;
			for (i = 0; i < queue.length; i++)
				if (queue[i].priority < relativePriority)
					break;

			queue.splice(i, 0, {
				task: task,
				priority: priority
			});

			loop();
		};
	})();

	webinos.TaskQueue = function (priority) {
		var relativePriority = 0;

		if (typeof priority === "number")
			relativePriority = priority;

		this.enqueue = function (task) {
			webinos.enqueue(task, relativePriority);
		};
	};

	// webinos.Exception
	// webinos.Error

	// webinos.EventTarget
	// webinos.EventListener
	// webinos.Event

	module.exports = function (dirname) {
		var dependencies = mUtils.findDependencies(dirname);

		var proxy = Object.create(webinos);
		proxy.local = mUtils.createEnvironment(dependencies);

		if (typeof proxy.local.root !== "undefined") {
			var dirname_ = nPath.join(nPath.dirname(dependencies), proxy.local.root.location),
				dependencies_ = mUtils.findDependencies(dirname_);

			proxy.global = mUtils.createEnvironment(dependencies_);
		}

		return proxy;
	};
})();
